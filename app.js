// Import d·ªØ li·ªáu l√° b√†i t·ª´ file ri√™ng
import { cards } from './data/cards.js';
import { getRandomAffiliateLink } from './data/affiliate-links.js';
import { updateAdContent, getAdAffiliateLink } from './data/ad-content.js';

// L∆∞u tr·ªØ b·ªô s∆∞u t·∫≠p trong localStorage
function getCollection() {
  return JSON.parse(localStorage.getItem('creatideck_collection') || '[]');
}
function saveCollection(arr) {
  localStorage.setItem('creatideck_collection', JSON.stringify(arr));
}

// L∆∞u tr·ªØ l·ªãch s·ª≠ card ƒë√£ hi·ªÉn th·ªã trong 5 ph√∫t
function getRecentCards() {
  const recent = JSON.parse(localStorage.getItem('creatideck_recent') || '[]');
  const now = Date.now();
  // L·ªçc b·ªè c√°c card c≈© h∆°n 5 ph√∫t (300000ms)
  const filtered = recent.filter(item => now - item.timestamp < 300000);
  if (filtered.length !== recent.length) {
    localStorage.setItem('creatideck_recent', JSON.stringify(filtered));
  }
  return filtered;
}

function saveRecentCard(cardId) {
  const recent = getRecentCards();
  recent.push({
    id: cardId,
    timestamp: Date.now()
  });
  localStorage.setItem('creatideck_recent', JSON.stringify(recent));
}

// L∆∞u tr·ªØ c√°c l√° b√†i ƒë√£ t·ª´ng ƒë∆∞·ª£c AI g·ª£i √Ω (ch·ªâ trong phi√™n hi·ªán t·∫°i, kh√¥ng l∆∞u localStorage)
let aiSuggestedIds = [];
function getAISuggestedIds() {
  return aiSuggestedIds;
}
function addAISuggestedId(cardId) {
  if (!aiSuggestedIds.includes(String(cardId))) {
    aiSuggestedIds.push(String(cardId));
  }
}

// DOM
const shuffleBtn = document.getElementById('shuffle-btn');
const previewCard = document.getElementById('preview-card');
const previewHeartBtn = document.getElementById('preview-heart-btn');
const cardModal = document.getElementById('card-modal');
const cardFlip = cardModal.querySelector('.card-flip');
const cardImg = document.getElementById('card-img');
const cardTitle = document.getElementById('card-title');
const cardDesc = document.getElementById('card-desc');
const cardExamples = document.getElementById('card-examples');
const reshuffleBtn = document.getElementById('reshuffle-btn');
const shareBtn = document.getElementById('share-btn');
const saveBtn = document.getElementById('save-btn');
const closeModal = document.getElementById('close-modal');
const showCollectionBtn = document.getElementById('show-collection-btn');
const collectionModal = document.getElementById('collection-modal');
const closeCollection = document.getElementById('close-collection');
const collectionGrid = document.getElementById('collection-grid');
const tagBtns = document.querySelectorAll('.tag-btn');
const deckShuffle = document.getElementById('deck-shuffle');

let currentCard = null;
let shuffleTimeout = null;

function pickRandomCard() {
  const recentCards = getRecentCards();
  const recentIds = recentCards.map(item => item.id);
  
  // L·ªçc ra c√°c card ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã trong 5 ph√∫t g·∫ßn ƒë√¢y
  const availableCards = cards.filter(card => !recentIds.includes(card.id));
  
  // N·∫øu t·∫•t c·∫£ card ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã, reset l·ªãch s·ª≠ v√† cho ph√©p random l·∫°i
  if (availableCards.length === 0) {
    localStorage.removeItem('creatideck_recent');
    return cards[Math.floor(Math.random() * cards.length)];
  }
  
  // Random t·ª´ c√°c card c√≥ s·∫µn
  const randomCard = availableCards[Math.floor(Math.random() * availableCards.length)];
  
  // L∆∞u card n√†y v√†o l·ªãch s·ª≠
  saveRecentCard(randomCard.id);
  
  return randomCard;
}

function updatePreviewCard(card, el = previewCard) {
  el.innerHTML = `
    <button class="heart-btn" id="preview-heart-btn">ü§ç</button>
    <img src="${card.image || card.img}" alt="Card Image" class="card-img card-img-top">
    <h2 class="card-title card-title-main">${card.title}</h2>
    <p class="card-desc card-desc-main">${card.description || card.desc}</p>
    <div class="card-examples-block">
      <div class="card-examples-title"><b>V√≠ d·ª•:</b></div>
      <ul class="card-examples">
        ${(card.examples || []).map(ex => `<li>${ex}</li>`).join('')}
      </ul>
    </div>
    ${card.note ? `<div class="card-note">${card.note}</div>` : ''}
  `;
  // Ch·ªâ g·∫Øn event heart cho l√° tr√™n c√πng
  if (el.id === 'preview-card') {
    const newHeartBtn = el.querySelector('#preview-heart-btn');
    newHeartBtn.addEventListener('click', togglePreviewHeart);
    updatePreviewHeartState();
  }
}

function updatePreviewHeartState() {
  if (!currentCard) return;
  const collection = getCollection();
  const isSaved = collection.find(c => c.id === currentCard.id);
  const heartBtn = previewCard.querySelector('#preview-heart-btn');
  
  if (isSaved) {
    heartBtn.textContent = '‚ù§Ô∏è';
    heartBtn.classList.add('saved');
  } else {
    heartBtn.textContent = 'ü§ç';
    heartBtn.classList.remove('saved');
  }
}

function togglePreviewHeart() {
  if (!currentCard) return;
  
  let collection = getCollection();
  const existingIndex = collection.findIndex(c => c.id === currentCard.id);
  
  if (existingIndex !== -1) {
    // Remove from collection
    collection.splice(existingIndex, 1);
    saveCollection(collection);
  } else {
    // Add to collection
    collection.push(currentCard);
    saveCollection(collection);
  }
  
  updatePreviewHeartState();
  
  // Add heart beat animation
  const heartBtn = previewCard.querySelector('#preview-heart-btn');
  heartBtn.classList.add('saved');
  setTimeout(() => {
    heartBtn.classList.remove('saved');
  }, 300);
}

function showCard(card) {
  currentCard = card;
  // Render n·ªôi dung v√†o .card b√™n trong .card-front
  const cardFront = cardFlip.querySelector('.card-front');
  const cardDiv = cardFront.querySelector('.card');
  cardDiv.innerHTML = `
    <img src="${card.image || card.img}" alt="Card Image" class="card-img card-img-top">
    <h2 class="card-title card-title-main">${card.title}</h2>
    <p class="card-desc card-desc-main">${card.description || card.desc}</p>
    <div class="card-examples-block">
      <div class="card-examples-title"><b>V√≠ d·ª•:</b></div>
      <ul class="card-examples">
        ${(card.examples || []).map(ex => `<li>${ex}</li>`).join('')}
      </ul>
    </div>
    ${card.note ? `<div class="card-note">${card.note}</div>` : ''}
  `;
  // Reset flip
  cardFlip.classList.remove('flipped');
  cardModal.classList.remove('hidden');
  cardFlip.classList.remove('flipping');
  setTimeout(() => {
    cardFlip.classList.add('flipping');
    setTimeout(() => {
      cardFlip.classList.add('flipped');
      cardFlip.classList.remove('flipping');
    }, 900);
  }, 100);
  updateSaveBtn();
}

function updateSaveBtn() {
  const collection = getCollection();
  if (currentCard && collection.find(c => c.id === currentCard.id)) {
    saveBtn.textContent = '‚ù§Ô∏è ƒê√£ l∆∞u';
    saveBtn.disabled = true;
  } else {
    saveBtn.textContent = '‚ù§Ô∏è L∆∞u';
    saveBtn.disabled = false;
  }
}

function playShuffleAnimation(callback) {
  // T·∫°o 5 l√° b√†i m·∫∑t sau
  deckShuffle.innerHTML = '';
  for (let i = 0; i < 5; i++) {
    const card = document.createElement('div');
    card.className = 'deck-card';
    deckShuffle.appendChild(card);
  }
  deckShuffle.style.display = 'flex';
  deckShuffle.classList.add('shuffling');
  // Sau 1.2s, d·ª´ng shuffle, cho l√° b√†i tr√™n c√πng bay ra
  setTimeout(() => {
    deckShuffle.classList.remove('shuffling');
    const topCard = deckShuffle.querySelector('.deck-card:last-child');
    if (topCard) topCard.classList.add('fly-out');
    // Sau 0.7s, ·∫©n deck v√† callback
    setTimeout(() => {
      deckShuffle.style.display = 'none';
      deckShuffle.innerHTML = '';
      if (callback) callback();
    }, 700);
  }, 1200);
}

// Qu·∫£n l√Ω b·ªô b√†i (deck) cho swipe
let deck = [...cards.map(card => card.id)];

function getCardById(id) {
  return cards.find(card => card.id == id);
}

function renderTopCards() {
  const card = getCardById(deck[0]);
  const nextCard = getCardById(deck[1]);
  const previewCardEl = document.getElementById('preview-card');
  const previewCardNextEl = document.getElementById('preview-card-next');
  if (card) {
    updatePreviewCard(card, previewCardEl);
    currentCard = card; // ƒê·∫£m b·∫£o currentCard lu√¥n l√† l√° tr√™n c√πng
  }
  if (nextCard) updatePreviewCard(nextCard, previewCardNextEl);
  else if (previewCardNextEl) previewCardNextEl.innerHTML = '';

  // ƒê·∫£m b·∫£o swipe-stack ƒë·ªß cao cho card d√†i nh·∫•t
  setTimeout(() => {
    const stack = document.querySelector('.swipe-stack');
    if (stack && previewCardEl) {
      const cardHeight = previewCardEl.offsetHeight;
      stack.style.minHeight = (cardHeight + 60) + 'px'; // 60px cho n√∫t
    }
  }, 0);
}

// Swipe gesture cho preview card
let startX = 0;
let currentX = 0;
let isDragging = false;
let isTouchingPreview = false;
let touchStartX = 0;
let touchStartY = 0;
let isHorizontalSwipe = false;

function onDragStart(e) {
  isDragging = true;
  if (e.type.startsWith('touch')) {
    isTouchingPreview = true;
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;
    isHorizontalSwipe = false;
  }
  startX = e.type.startsWith('touch') ? e.touches[0].clientX : e.clientX;
  previewCard.style.transition = '';
}

function onDragMove(e) {
  if (!isDragging) return;
  currentX = e.type.startsWith('touch') ? e.touches[0].clientX : e.clientX;
  const dx = currentX - startX;
  previewCard.style.transform = `translateX(${dx}px) rotate(${dx/15}deg)`;
  // N·∫øu ƒëang swipe ngang tr√™n preview card, ch·∫∑n scroll d·ªçc
  if (isTouchingPreview && e.type.startsWith('touch')) {
    const touch = e.touches[0];
    const deltaX = touch.clientX - touchStartX;
    const deltaY = touch.clientY - touchStartY;
    // Ch·ªâ ch·∫∑n scroll d·ªçc n·∫øu swipe ngang r√µ r·ªát
    if (!isHorizontalSwipe && Math.abs(deltaX) > 10 && Math.abs(deltaX) > Math.abs(deltaY) + 8) {
      isHorizontalSwipe = true;
      document.body.style.overflow = 'hidden';
    }
    if (isHorizontalSwipe) {
      e.preventDefault();
    }
  }
}

function onDragEnd(e) {
  if (!isDragging) return;
  isDragging = false;
  if (isTouchingPreview) {
    isTouchingPreview = false;
    isHorizontalSwipe = false;
    document.body.style.overflow = '';
  }
  const dx = (e.type.startsWith('touch') ? e.changedTouches[0].clientX : e.clientX) - startX;
  const threshold = 100;
  if (dx < -threshold) {
    // Vu·ªët tr√°i: sang l√° m·ªõi (deck ti·∫øn t·ªõi)
    previewCard.style.transition = 'transform 0.35s cubic-bezier(.4,2,.6,1)';
    previewCard.style.transform = `translateX(-1000px) rotate(-15deg)`;
    setTimeout(() => {
      const swiped = deck.shift();
      deck.push(swiped);
      previewCard.style.transition = '';
      previewCard.style.transform = '';
      renderTopCards();
    }, 350);
  } else if (dx > threshold) {
    // Vu·ªët ph·∫£i: quay l·∫°i l√° tr∆∞·ªõc (deck l√πi l·∫°i)
    previewCard.style.transition = 'transform 0.35s cubic-bezier(.4,2,.6,1)';
    previewCard.style.transform = `translateX(1000px) rotate(15deg)`;
    setTimeout(() => {
      const last = deck.pop();
      deck.unshift(last);
      previewCard.style.transition = '';
      previewCard.style.transform = '';
      renderTopCards();
    }, 350);
  } else {
    // Kh√¥ng ƒë·ªß xa, tr·∫£ v·ªÅ v·ªã tr√≠ c≈©
    previewCard.style.transition = 'transform 0.2s';
    previewCard.style.transform = '';
  }
}

function renderCollection(tag) {
  const collection = getCollection();
  collectionGrid.innerHTML = '';

  // Sinh danh s√°ch tag filter ƒë·ªông
  const tagFilter = document.querySelector('.tag-filter');
  if (tagFilter) {
    // L·∫•y t·∫•t c·∫£ tag duy nh·∫•t t·ª´ b·ªô s∆∞u t·∫≠p
    const allTags = Array.from(new Set(collection.flatMap(card => Array.isArray(card.tags) ? card.tags : [])));
    tagFilter.innerHTML = '';
    // Lu√¥n c√≥ n√∫t 'T·∫•t c·∫£'
    const allBtn = document.createElement('button');
    allBtn.className = 'tag-btn';
    allBtn.dataset.tag = 'all';
    allBtn.textContent = 'T·∫•t c·∫£';
    if (tag === 'all') allBtn.classList.add('active');
    tagFilter.appendChild(allBtn);
    allBtn.addEventListener('click', () => {
      document.querySelectorAll('.tag-btn').forEach(b => b.classList.remove('active'));
      allBtn.classList.add('active');
      renderCollection('all');
    });
    // Th√™m c√°c tag c√≤n l·∫°i
    allTags.forEach(t => {
      const btn = document.createElement('button');
      btn.className = 'tag-btn';
      btn.dataset.tag = t;
      btn.textContent = t;
      if (tag === t) btn.classList.add('active');
      tagFilter.appendChild(btn);
      btn.addEventListener('click', () => {
        document.querySelectorAll('.tag-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        renderCollection(t);
      });
    });
  }

  let filtered = collection;
  if (tag && tag !== 'all') {
    filtered = collection.filter(card => Array.isArray(card.tags) && card.tags.includes(tag));
  }
  if (filtered.length === 0) {
    collectionGrid.innerHTML = '<p style="grid-column:1/-1;text-align:center;color:#aaa;">Ch∆∞a c√≥ l√° b√†i n√†o.</p>';
    return;
  }
  filtered.forEach(card => {
    const div = document.createElement('div');
    div.className = 'card';
    div.style.position = 'relative';
    div.innerHTML = `
      <img src="${card.image || card.img}" alt="img" class="card-img" style="width:60px;height:60px;">
      <h3 class="card-title" style="font-size:1rem;">${card.title}</h3>
      <p class="card-desc" style="font-size:0.95rem;">${card.description || card.desc || ''}</p>
      <ul class="card-examples" style="font-size:0.92rem;">${(card.examples||[]).map(e=>`<li>${e}</li>`).join('')}</ul>
    `;
    collectionGrid.appendChild(div);
  });
}

// H√†m g·ªçi AI Gemini
async function askGPT(text, prompt) {
    const apiKey = 'AIzaSyBQ9bQy3HnXMVdAeHo67K-x2TLBE4Hibis';
    const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

    const body = {
      contents: [
        {
          role: "user",
          parts: [
            { text: prompt + `\n\nB√¨nh lu·∫≠n: ${text}` }
          ]
        }
      ]
    };

    const response = await fetch(`${url}?key=${apiKey}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    });

    const data = await response.json();
    const result = data?.candidates?.[0]?.content?.parts?.[0]?.text ?? "Kh√¥ng r√µ";
    return result.trim().toLowerCase();
}

// X·ª≠ l√Ω AI Suggestion
const aiInput = document.getElementById('ai-product-desc');
const aiBtn = document.getElementById('ai-suggest-btn');
const aiResult = document.getElementById('ai-suggest-result');

if (aiBtn && aiInput && aiResult) {
  aiBtn.addEventListener('click', async () => {
    const desc = aiInput.value.trim();
    if (!desc) {
      aiResult.textContent = 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m.';
      aiResult.classList.add('active');
      return;
    }
    // Lo·∫°i b·ªè c√°c l√° b√†i ƒë√£ t·ª´ng ƒë∆∞·ª£c AI g·ª£i √Ω kh·ªèi prompt (vƒ©nh vi·ªÖn trong phi√™n)
    const aiSuggested = getAISuggestedIds();
    let filteredCards = cards.filter(c => !aiSuggested.includes(String(c.id)));
    // N·∫øu t·∫•t c·∫£ ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c g·ª£i √Ω, t·ª± ƒë·ªông reset l·∫°i danh s√°ch v√† ti·∫øp t·ª•c g·ª£i √Ω l·∫°i t·ª´ ƒë·∫ßu
    if (filteredCards.length === 0) {
      aiSuggestedIds = [];
      filteredCards = cards;
    }
    aiBtn.disabled = true;
    aiResult.textContent = 'ƒêang ph√¢n t√≠ch AI...';
    aiResult.classList.add('active');
    const prompt = `B·∫°n l√† chuy√™n gia s√°ng t·∫°o n·ªôi dung video viral. D∆∞·ªõi ƒë√¢y l√† danh s√°ch c√°c √Ω t∆∞·ªüng m·ªü ƒë·∫ßu video viral (m·ªói √Ω t∆∞·ªüng g·ªìm id, title, description, note v√† v√≠ d·ª• m·∫´u). D·ª±a v√†o m√¥ t·∫£ s·∫£n ph·∫©m, h√£y:\n\n1. Ch·ªçn **duy nh·∫•t 1 l√° b√†i ph√π h·ª£p nh·∫•t v·ªõi ng·ªØ c·∫£nh m√¥ t·∫£ s·∫£n ph·∫©m, m·ª•c ƒë√≠ch ƒë·ªÉ t·∫°o ƒë∆∞·ª£c ƒëo·∫°n hook ƒë·∫ßu c·ªßa video ƒë·∫°t m·ª©c viral nh·∫•t c√≥ th·ªÉ, l∆∞u √Ω ph·∫£i ƒë·ªçc to√†n k·ªπ to√†n b·ªô c√°c l√° b√†i ƒë·ªÉ ph√¢n t√≠ch th·∫≠t s√¢u sau ƒë√≥ m·ªõi ƒë∆∞a ra k·∫øt qu·∫£ cu·ªëi c√πng, kh√¥ng ƒë∆∞·ª£c ch·ªçn b·ª´a 1 l√° ·ªü g·∫ßn**.\n2. D·ª±a theo √Ω t∆∞·ªüng ƒë√≥ v√† m√¥ t·∫£ s·∫£n ph·∫©m, **vi·∫øt m·ªôt c√¢u m·ªü ƒë·∫ßu video c·ª• th·ªÉ, s√°ng t·∫°o, h·∫•p d·∫´n, theo ƒë√∫ng phong c√°ch c·ªßa l√° b√†i ƒë√≥**.\n3. Tr·∫£ v·ªÅ ƒë√∫ng 1 d√≤ng theo format sau:  \n   "id"\n\n‚ùå Kh√¥ng tr·∫£ v·ªÅ gi·∫£i th√≠ch.  \n‚ùå Kh√¥ng li·ªát k√™ nhi·ªÅu l·ª±a ch·ªçn.  \n‚úÖ Ch·ªâ ch·ªçn 1 v√† vi·∫øt 1 v√≠ d·ª• c·ª• th·ªÉ, ƒë√∫ng ng·ªØ c·∫£nh s·∫£n ph·∫©m.\n\nM√¥ t·∫£ s·∫£n ph·∫©m: "${desc}"\n\nDanh s√°ch l√° b√†i:\n${filteredCards.map(c => `id: ${c.id}, title: ${c.title}, description: ${c.description || c.desc}, note: ${c.note}, examples: ${c.examples?.join(' | ') || '[]'}`).join('\n')}`;
    try {
      const gptResult = await askGPT(desc, prompt);
      // DEBUG: log k·∫øt qu·∫£ AI
      console.log('gptResult:', gptResult);
      // L·∫•y d√≤ng ƒë·∫ßu ti√™n kh√¥ng r·ªóng l√†m id, d√≤ng ti·∫øp theo (n·∫øu c√≥) l√†m v√≠ d·ª•
      let aiKey = '';
      let aiIntro = '';
      let lines = gptResult.split('\n').filter(line => line.trim() !== '');
      if (lines.length > 0) {
        aiKey = lines[0].trim();
        if (lines.length > 1) aiIntro = lines[1].trim();
      }
      console.log('aiKey:', aiKey, 'aiIntro:', aiIntro);
      setTimeout(() => {
        const aiDiv = document.getElementById('ai-intro-suggest');
        if (aiDiv) {
          if (aiIntro) {
            aiDiv.innerHTML = `<span style='font-size:1.1em;'>üí° <b>C√¢u m·ªü ƒë·∫ßu g·ª£i √Ω:</b></span><br>${aiIntro}`;
          } else {
            aiDiv.innerHTML = `<span style='font-size:1.1em;'>üí° <b>K·∫øt qu·∫£ AI (full):</b></span><br>${gptResult}`;
          }
          aiDiv.classList.add('active');
        }
      }, 100);
      // Sau khi nh·∫≠n k·∫øt qu·∫£ t·ª´ AI, t√¨m l√° b√†i theo id trong to√†n b·ªô cards
      let found = null;
      if (aiKey) {
        found = cards.find(c => String(c.id) === aiKey);
      }
      if (!found) {
        aiResult.textContent = 'Kh√¥ng t√¨m th·∫•y l√° b√†i ph√π h·ª£p.';
        aiBtn.disabled = false;
        return;
      }
      // ƒê∆∞a l√° b√†i n√†y l√™n ƒë·∫ßu deck v√† c·∫≠p nh·∫≠t preview card
      const idx = deck.findIndex(id => String(id) === String(found.id));
      if (idx > 0) {
        deck.splice(idx, 1);
        deck.unshift(found.id);
      } else if (idx === -1) {
        deck.unshift(found.id);
      }
      renderTopCards();
      aiResult.innerHTML = 'ƒê√£ g·ª£i √Ω √Ω t∆∞·ªüng ph√π h·ª£p!';
      // L∆∞u l·∫°i id l√° b√†i ƒë√£ g·ª£i √Ω ƒë·ªÉ lo·∫°i vƒ©nh vi·ªÖn trong phi√™n
      addAISuggestedId(found.id);
      // Cu·ªôn l√™n v·ªã tr√≠ b·ªô b√†i n·∫øu tr√™n mobile
      const stack = document.querySelector('.swipe-stack');
      if (stack && window.innerWidth < 700) {
        stack.scrollIntoView({behavior: 'smooth', block: 'center'});
      }
    } catch (e) {
      aiResult.textContent = 'C√≥ l·ªói khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i.';
      aiResult.classList.add('active');
    }
    aiBtn.disabled = false;
  });
}// ƒê·∫∑t to√†n b·ªô kh·ªüi t·∫°o v√†o DOMContentLoaded

document.addEventListener('DOMContentLoaded', () => {
  // Kh·ªüi t·∫°o qu·∫£ng c√°o
  updateAdContent();

  // Khi load trang, render 2 l√° b√†i ƒë·∫ßu ti√™n
  renderTopCards();

  // G·∫Øn event listener cho swipe (chu·ªôt + c·∫£m ·ª©ng)
  const previewCardEl = document.getElementById('preview-card');
  previewCardEl.addEventListener('mousedown', onDragStart);
  document.addEventListener('mousemove', onDragMove);
  document.addEventListener('mouseup', onDragEnd);
  previewCardEl.addEventListener('touchstart', onDragStart, {passive: false});
  document.addEventListener('touchmove', onDragMove, {passive: false});
  document.addEventListener('touchend', onDragEnd, {passive: false});

  shuffleBtn.addEventListener('click', () => {
    updateAdContent(true);
    playShuffleAnimation(() => {
      const card = pickRandomCard();
      updatePreviewCard(card);
      // Cu·ªôn l√™n v·ªã tr√≠ b·ªô b√†i n·∫øu tr√™n mobile
      const stack = document.querySelector('.swipe-stack');
      if (stack && window.innerWidth < 700) {
        stack.scrollIntoView({behavior: 'smooth', block: 'center'});
      }
    });
  });

  // Add event listener for preview heart button
  // (n√∫t n√†y ƒë∆∞·ª£c render l·∫°i m·ªói l·∫ßn updatePreviewCard)
  // => ƒë√£ g·∫Øn trong updatePreviewCard

  // Initialize heart button state
  updatePreviewHeartState();

  reshuffleBtn.addEventListener('click', () => {
    updateAdContent(true);
    const adLink = getAdAffiliateLink();
    window.open(adLink, '_blank');
    playShuffleAnimation(() => {
      const card = pickRandomCard();
      showCard(card);
    });
  });

  closeModal.addEventListener('click', () => {
    cardModal.classList.add('hidden');
  });

  saveBtn.addEventListener('click', () => {
    if (!currentCard) return;
    let collection = getCollection();
    if (!collection.find(c => c.id === currentCard.id)) {
      collection.push(currentCard);
      saveCollection(collection);
      updateSaveBtn();
    }
  });

  showCollectionBtn.addEventListener('click', () => {
    renderCollection('all');
    collectionModal.classList.remove('hidden');
  });

  closeCollection.addEventListener('click', () => {
    collectionModal.classList.add('hidden');
  });

  tagBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      tagBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      renderCollection(btn.dataset.tag);
    });
  });

  shareBtn.addEventListener('click', () => {
    if (!currentCard) return;
    const text = `"${currentCard.title}"\n${currentCard.description}\nV√≠ d·ª•: ${currentCard.examples[0]}`;
    if (navigator.share) {
      navigator.share({
        title: currentCard.title,
        text,
        url: window.location.href
      });
    } else {
      // Fallback: Facebook share
      const fbUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}&quote=${encodeURIComponent(text)}`;
      window.open(fbUrl, '_blank');
    }
  });

  // ƒê√≥ng modal khi b·∫•m ngo√†i
  window.addEventListener('click', (e) => {
    if (e.target === cardModal) cardModal.classList.add('hidden');
    if (e.target === collectionModal) collectionModal.classList.add('hidden');
  });

  // Auto mobile full screen card
  window.addEventListener('resize', adjustModalWidth);
  adjustModalWidth();
});

// Hi·ªáu ·ª©ng flip CSS b·ªï sung
const style = document.createElement('style');
style.innerHTML = `
.card-flip { position: relative; }
.card-flip .card { transition: transform 0.7s cubic-bezier(.4,2,.6,1); }
.card-flip.flipped .card-back { transform: rotateY(180deg); }
.card-flip.flipped .card-front { transform: rotateY(0deg); }
.card-flip .card-front { transform: rotateY(180deg); }
.card-flip .card-back { transform: rotateY(0deg); }
.card-flip.flipping .card { transition: none; }
`;
document.head.appendChild(style);

// Auto mobile full screen card
function adjustModalWidth() {
  if (window.innerWidth < 500) {
    document.querySelectorAll('.modal-content').forEach(el => {
      el.style.width = '98vw';
      el.style.minWidth = '0';
    });
  } else {
    document.querySelectorAll('.modal-content').forEach(el => {
      el.style.width = '';
      el.style.minWidth = '';
    });
  }
} 


